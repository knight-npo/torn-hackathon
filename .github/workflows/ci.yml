name: Workflow

on:
  push:
    branches:
      - main

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_GIT_TOKEN }}
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
      - name: Install dependencies
        uses: php-actions/composer@v6
        with:
          php_version: "8.1"
      - name: Install CS-Fixer
        run: |
          mkdir -p tools/php-cs-fixer
          composer require --working-dir=tools/php-cs-fixer friendsofphp/php-cs-fixer
      - name: Lint
        run: |
          tools/php-cs-fixer/vendor/bin/php-cs-fixer fix app
          tools/php-cs-fixer/vendor/bin/php-cs-fixer fix index.php
          ./vendor/bin/phpcbf index.php
          ./vendor/bin/phpcbf app
          if [[ $(git status --porcelain | grep -v '??' | wc -l) -ne 0 ]] ; then
            echo "Status not clean, Requires linting"
            exit 1
          fi
  build-image:
    name: Build and Push
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build-image-tag.outputs.image_tag }}
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.REPO_GIT_TOKEN }}
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: /tmp/composer-cache
          key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}
      - name: Install dependencies
        uses: php-actions/composer@v6
        with:
          php_version: "8.1"
      - name: Build and Push Image
        id: build-image-tag
        run: |
          IMAGE_TAG=$(printf "%s-%s" \
            $(git rev-parse --abbrev-ref HEAD | sed -e 's!/!-!g') $(git rev-parse --short HEAD))
          echo "image_tag=${IMAGE_TAG}" >> "$GITHUB_OUTPUT"

          make IMAGE_TAG=${IMAGE_TAG} CONTAINER_REGISTRY=${{ secrets.DOCKER_REGISTRY }} build-and-push-migrate
          make IMAGE_TAG=${IMAGE_TAG} CONTAINER_REGISTRY=${{ secrets.DOCKER_REGISTRY }} build-and-push-app
  deploy:
    name: Deploy to Server
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH Keys
        uses: webfactory/ssh-agent@v0.7.0
        with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Deploy
        run: |
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_ADDR }} \
            IMAGE_TAG=${{ needs.build-image.outputs.image_tag }} ./projects/torn-hk/deploy.sh
